# 프로덕션용 Docker Compose - 어디서든 배포 가능!
version: '3.8'

services:
  spring-app:
    build: 
      context: .
      dockerfile: Dockerfile.railway
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-demo_db}
      - DB_USERNAME=${POSTGRES_USER:-spring_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - SPRING_PROFILES_ACTIVE=production
    depends_on:
      postgres-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-demo_db}
      POSTGRES_USER: ${POSTGRES_USER:-spring_user}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    restart: unless-stopped
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spring_user} -d ${POSTGRES_DB:-demo_db}"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  spring-network:
    driver: bridge

# 사용법:
# 1. .env 파일 생성 후 환경변수 설정
# 2. docker-compose -f docker-compose.production.yml up -d
# 3. 모든 클라우드 플랫폼에서 실행 가능! 